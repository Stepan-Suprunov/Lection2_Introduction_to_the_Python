#  СПИСКИ

list_1 = []  # Создание пустого списка
list_2 = list()  # Создание пустого списка (через функцию list)
list_1 = [7, 9, 11, 13, 15, 17]  # Создание заполненного списка
print(list_1[0])  # Печать по индексу

list_1.append(8)  # .append Добавить элемент в конец списка
list_1 = []
for i in range(5):
    list_1.append(i)  # Добавление новых элементов в конец списка

list_1.pop()  # .pop Удалить последний элемент списка
print(list_1.pop())  # Вывод списка с удалением последнего элемента из списка
print(list_1.pop(1))  # Если указать в скобках цифру, то из сптска удалится элемент по указанному индексу

print(list_1.insert(2, 11))  # .insert Добавление элемента в список. Первая цифра в скобках - индекс нового элемента,
                             # Вторая цифра в скоббках - сам элемент

print(list_1[len(list_1)-1])  #  вывести предпоследний элемент массива
print(list_1[-5])  # Отрицательная индексация. Выведет пятый элемент с конца массива
print(list_1[:3])  # Вывести элементы до второго индекса (третий не включается)
print(list_1[3:])  # Выыести элементы начная с третьего индекса
print(list_1[len(list_1)-2:])  # Вывести элементы списка сначиная со второго индекса с конца
print(list_1[2:9])  # Вывести элементы списка со второго индекса по восьмой (девятый не включается)
print(list_1[1:6:2])  # Третья цифра в скобках определяет шаг. Выведем элементы начиная со второго индекса
                      # по пятый (шестёрка не включается) с шагом 2.
print(list_1[::4])  # Вывести весь массив с шагом 4
print(list_1[:])  # Вывести весь массив


#  КОРТЕЖИ

# Кортеж - неизменяемый список

t = ()  # Сздание пустого кортежа
t = (1, 5, 3,)  # Создание заполненного кортежа (в конце оязательно должна быть запятая)

v = [1, 8, 9]  # Список
v = tuple(v)   # Преорпазование списка в кортеж

a, b, c = v  # Разьединение кортежа на переменные

print(v[1])  # Выведение кортежа по индексам


#  СЛОВАРИ

# Словари - это неупорядоченные коллекции произвольных объектов с доступом по ключу
# В списках в качестве ключа используется индекс элемента, а в словаре для определения элемента используется значение ключа

d = {}  # Создание пустого словаря
d = dict()  # Создание пустого словаря
d['q'] = 'qwerty'  # Добавлять значенния в словарь (q - индекс, qwerty - значение)
print(d['q'])  # Вывод значения в словаре по индексу (числа вводятся без скобок)
d = {'right': '→', 'left': '←', 'up': '↑', 'down': '↓'}  # Создание заполненного словаря
del d['left']  # Удаление элемента из списка

for item in d:   # Вывод ключей из словаря циклом for
    print(item)

for item in d:                             # Вывод словаря в виде ключ и значение циклом for
    print('{}: {}'.format(item, d[item]))
for (k,v) in d.items():
    print(k, v)                            # Второй способ


#  МНОЖЕСТВА

# Множества содержат в себе уникальные элементы, не оббязательно упорядоченные. Одно множество может содержать в себе значения любых типов

colors = set()  # Создание пустого множества

colors = {'red', 'green', 'blue'}  # Создание заполненного множества
colors.add('red')  # Добавление элемента в множество (если такой элемент уже содержится в множестве, то ничего не добавится)
colors.remove('red')  # Удаление элемента из множества (выдаёт ошибку, если такого элемента а множестве нет)
colors.discard('red')  # Удаление элемента из множества (не выдаёт ошибку, если такого элемента а множестве нет)
colors.clear()  # Удаляет всех элементов из множества

v = [1, 8, 8, 9]
v = set(v)  # Преобразование списка в множество (все повторяющиеся элементы в списке будут удалены)

a = {1, 2, 3, 5, 8}
b = {2, 5, 8, 13, 21}
c = a.copy()  # Копирование множества (c = {1, 2, 3, 5, 8})
u = a.union(b)  # Объединение множеств (u = {1, 2, 3, 5, 8, 13, 21}) (будет содержать все уникальные элементы из множеств)
i = a.intersection(b)  # Поиск пересечений. Те элементы которые присутствуют в обоих множествах (i = {8, 2, 5})
dl = a.difference(b)  # Поиск разности. Из первого  множества будут удалены все элементы, которые находятся во втором (dl = {1, 3})
dr = b.difference(a)  # dr = {13, 21}
q = a.union(b).difference(a.intersection(b))  # Все действия в функции происходят по математическому порядку (q = {1, 21, 3, 13}

a =  {1, 8, 6}
b = frozenset(a)  # Создание замороженного множества (замороженное множество невозможно изменять)


#  ГЕНЕРАТОР СПИСКОВ
# Используется для создания и заполнения списков вместо цикла for для упрощения

list_1 = [i for i in range(1, 101)]  # Создание списка из чисел в диапазоне от 1 до 100. [1, 2, 3,..., 100]
list_1 = [i for i in range(1, 101) if i % 2 == 0]  # Добавляем условие. Создание списка из ЧЁТНЫХ чисел в диапазоне от 1 до 100. [2, 4, 6,..., 100]
list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0]  # Создать пары каждому из чисел (кортежи). [(2, 2), (4, 4), (6, 6),..., (100, 100)]
list_1 = [i * 2 for i in range(10) if i % 2 == 0]  # Также можно умножать, делить, приавлять, вычитать. Например, умножить значение на 2. [0, 4, 8, 12, 16]


#  ОШИБКИ

SyntaxError  # Синтаксическая ошбика. Например заыть поставить двоеточие. (SyntaxError: expected ':')
IndentationError  # Ошибка отступов. Например заыть поставить блок отступов после if
TypeError  # Типовая ошибка. Например попытка сложения строки с числом
ZeroDivisionError  # Ошибка возникающая при попытке деления на НОЛЬ
KeyError  # Ошибка ключа. Например если введён неверный ключ в словаре или индекс в списке
NameError  # Ошибка имени переменной.
ValueError  # Ошибка значения. Например если приводить текстовую переменную в число.